// 线程池
// 场景设想: 服务器程序, 每来一个客户端, 就创建一个新线程为这个客户提供服务. 
// 问题: 
// - 2万个玩家, 不可能给每个玩家创建一个新线程, 此程序写法在这种场景下不通. 
// - 程序稳定性问题: 编写代码中, “时不时地突然”创建一个线程, 这种写法, 一般情况下不会出错, 但是不稳定的
// 线程池: 把一堆线程弄到一起, 统一管理. 这种统一管理调度, 循环利用的方式, 就叫做线程池. 
// 实现方式: 程序启动时, 一次性创建好一定数量的线程. 这种方式让人更放心, 觉得程序代码更稳定. 

// 线程创建数量谈: 
// 1. 线程创建的数量极限的问题
// 一般来讲, 2000个线程基本就是极限; 再创建就会崩溃. 
// 2. 线程创建数量建议
//     - 采用某些计数开发程序提供的建议, 遵照建议和指示来确保程序高效执行. 
//     - 创建多线程完成业务; 考虑可能被阻塞的线程数量, 创建多余最大被阻塞线程数量的线程, 如100个线程被阻塞再充值业务, 开110个线程就是很合适的
//     - 线程创建数量尽量不要超过500个, 尽量控制在200个之内; 

// 参考: https://blog.csdn.net/qq_38231713/article/details/106093614
int main(int argc, char const *argv[])
{
    return 0;
}